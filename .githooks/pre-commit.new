#!/bin/bash
#
# MDSG Pre-commit Hook - Quality Gate
# Ensures code quality before commits reach CI
#

set -e

echo "🧪 MDSG Code Alchemist - Pre-commit Quality Gate"
echo "=============================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "success")
            echo -e "${GREEN}✅ $message${NC}"
            ;;
        "error")
            echo -e "${RED}❌ $message${NC}"
            ;;
        "warning")
            echo -e "${YELLOW}⚠️  $message${NC}"
            ;;
        "info")
            echo -e "${YELLOW}🔍 $message${NC}"
            ;;
    esac
}

# Check if Node.js and npm are available
if ! command -v node &> /dev/null; then
    print_status "error" "Node.js is not installed or not in PATH"
    exit 1
fi

if ! command -v npm &> /dev/null; then
    print_status "error" "npm is not installed or not in PATH"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|ts|jsx|tsx|vue|svelte)$' || true)

if [ -z "$STAGED_FILES" ]; then
    print_status "info" "No JavaScript/TypeScript files staged for commit"
    exit 0
fi

print_status "info" "Checking staged files: $(echo $STAGED_FILES | wc -w) files"

# Install dependencies if node_modules doesn't exist
if [ ! -d "node_modules" ]; then
    print_status "info" "Installing dependencies..."
    npm install --silent
fi

# Run ESLint on staged files
print_status "info" "Running ESLint..."
if npm run lint:check -- $STAGED_FILES; then
    print_status "success" "ESLint checks passed"
else
    print_status "error" "ESLint found issues. Attempting auto-fix..."
    
    # Try to auto-fix issues
    if npm run lint:fix -- $STAGED_FILES; then
        print_status "warning" "ESLint auto-fixed issues. Please review and re-stage files."
        
        # Show which files were modified
        echo ""
        echo "Modified files:"
        for file in $STAGED_FILES; do
            if git diff --name-only "$file" | grep -q "$file"; then
                echo "  - $file"
            fi
        done
        
        print_status "warning" "Please review changes and run: git add <files> && git commit"
        exit 1
    else
        print_status "error" "ESLint auto-fix failed. Please fix manually."
        exit 1
    fi
fi

# Run Prettier check
print_status "info" "Checking Prettier formatting..."
if npm run format:check -- $STAGED_FILES; then
    print_status "success" "Prettier formatting is correct"
else
    print_status "error" "Prettier formatting issues found. Auto-formatting..."
    
    # Auto-format files
    npm run format:write -- $STAGED_FILES
    
    print_status "warning" "Files have been formatted. Please review and re-stage."
    echo ""
    echo "Formatted files:"
    for file in $STAGED_FILES; do
        if git diff --name-only "$file" | grep -q "$file"; then
            echo "  - $file"
        fi
    done
    
    print_status "warning" "Please review changes and run: git add <files> && git commit"
    exit 1
fi

# Run a quick syntax check
print_status "info" "Running syntax validation..."
SYNTAX_ERRORS=0
for file in $STAGED_FILES; do
    if ! node -c "$file" 2>/dev/null; then
        print_status "error" "Syntax error in $file"
        SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
    fi
done

if [ $SYNTAX_ERRORS -gt 0 ]; then
    print_status "error" "Found $SYNTAX_ERRORS syntax error(s). Please fix before committing."
    exit 1
fi

# Check bundle size impact (for main.js changes)
if echo "$STAGED_FILES" | grep -q "src/main.js"; then
    print_status "info" "Checking bundle size impact..."
    
    # Quick build check
    if npm run build:check 2>/dev/null; then
        print_status "success" "Bundle size check passed"
    else
        print_status "warning" "Bundle size check unavailable (continuing...)"
    fi
fi

# Run security-related checks if security files are modified
if echo "$STAGED_FILES" | grep -qE "(security|auth|token|csrf)"; then
    print_status "info" "Running security-focused tests..."
    
    if npm run test:security 2>/dev/null; then
        print_status "success" "Security tests passed"
    else
        print_status "warning" "Security tests unavailable (continuing...)"
    fi
fi

print_status "success" "All pre-commit checks passed! 🎉"
print_status "info" "Your code meets MDSG quality standards"

echo ""
echo "📊 Commit Summary:"
echo "  - Files checked: $(echo $STAGED_FILES | wc -w)"
echo "  - ESLint: ✅ Passed"
echo "  - Prettier: ✅ Passed"
echo "  - Syntax: ✅ Passed"
echo ""
echo "🚀 Ready for commit!"
