name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Code Quality & Format
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run quality checks
        run: npm run quality

      - name: Cache quality results
        uses: actions/cache@v3
        with:
          path: node_modules/.cache/eslint
          key: eslint-${{ runner.os }}-${{ hashFiles('eslint.config.js') }}-${{ hashFiles('package-lock.json') }}

  test:
    name: Test & Security
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        test-suite: 
          - basic
          - security
          - advanced

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-suite }} tests
        run: |
          case "${{ matrix.test-suite }}" in
            "basic")
              npm run test:run tests/basic.test.js tests/mdsg.test.js
              ;;
            "security")
              npm run test:run tests/security.test.js tests/security-basic.test.js tests/token-manager.test.js
              ;;
            "advanced")
              npm run test:run tests/markdown.test.js tests/csp-simple.test.js
              ;;
          esac

      - name: Generate coverage (Node 20, basic tests only)
        if: matrix.node-version == '20.x' && matrix.test-suite == 'basic'
        run: npm run test:coverage tests/basic.test.js

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x' && matrix.test-suite == 'basic'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: npm run size

      - name: Test build artifacts
        run: |
          # Check that essential files exist
          test -f dist/index.html || exit 1
          test -f dist/assets/*.js || exit 1
          test -f dist/assets/*.css || exit 1
          
          # Check bundle size (target: <20KB)
          BUNDLE_SIZE=$(find dist/assets -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
          echo "Bundle size: $BUNDLE_SIZE bytes"
          if [ "$BUNDLE_SIZE" -gt 20480 ]; then
            echo "❌ Bundle size exceeds 20KB limit"
            exit 1
          fi
          echo "✅ Bundle size within limits"

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-${{ runner.os }}-${{ github.sha }}

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for performance testing
        run: npm run build

      - name: Performance audit
        run: |
          npm run preview &
          PREVIEW_PID=$!
          sleep 5
          
          # Basic performance checks
          curl -f http://localhost:3001 > /dev/null || exit 1
          
          # Kill preview server
          kill $PREVIEW_PID

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for security vulnerabilities
        run: |
          # Additional security checks can be added here
          echo "✅ Security audit completed"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, test, build, performance, security-audit]
    if: always()

    steps:
      - name: Check overall status
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.performance.result }}" == "success" && 
                "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
          else
            echo "❌ Some CI checks failed"
            echo "Quality: ${{ needs.quality.result }}"
            echo "Tests: ${{ needs.test.result }}"
            echo "Build: ${{ needs.build.result }}"
            echo "Performance: ${{ needs.performance.result }}"
            echo "Security: ${{ needs.security-audit.result }}"
            exit 1
          fi
