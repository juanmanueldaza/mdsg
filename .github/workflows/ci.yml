name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check code formatting
      run: npm run format:check

    - name: Run tests
      run: npm run test:run

    - name: Generate coverage report
      run: npm run test:coverage
      if: matrix.node-version == '20.x'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build application
      run: npm run build

    - name: Test build artifacts
      run: |
        test -f dist/index.html
        test -f dist/assets/*.css
        test -f dist/assets/*.js
        echo "Build artifacts verified successfully"

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate

  compatibility:
    name: Browser Compatibility
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Check bundle size
      run: |
        echo "Checking bundle sizes..."
        du -h dist/assets/*.js
        du -h dist/assets/*.css

        # Fail if JS bundle is too large (>50KB compressed)
        JS_SIZE=$(find dist/assets -name "*.js" -exec gzip -c {} \; | wc -c)
        if [ $JS_SIZE -gt 51200 ]; then
          echo "JS bundle too large: ${JS_SIZE} bytes (limit: 51200)"
          exit 1
        fi

        # Fail if CSS bundle is too large (>20KB compressed)
        CSS_SIZE=$(find dist/assets -name "*.css" -exec gzip -c {} \; | wc -c)
        if [ $CSS_SIZE -gt 20480 ]; then
          echo "CSS bundle too large: ${CSS_SIZE} bytes (limit: 20480)"
          exit 1
        fi

        echo "Bundle sizes within limits ✅"

  deployment-test:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Test OAuth server
      run: |
        # Start server in background
        GITHUB_CLIENT_ID=test GITHUB_CLIENT_SECRET=test npm run server &
        SERVER_PID=$!

        # Wait for server to start
        sleep 3

        # Test health endpoint
        curl -f http://localhost:3001/health || {
          echo "Health check failed"
          kill $SERVER_PID
          exit 1
        }

        # Clean up
        kill $SERVER_PID
        echo "OAuth server test passed ✅"

    - name: Validate HTML output
      run: |
        # Install HTML validator
        npm install -g html-validate

        # Validate built HTML
        html-validate dist/index.html || {
          echo "HTML validation failed"
          exit 1
        }

        echo "HTML validation passed ✅"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: Start static server
      run: |
        npx serve dist -s -l 3000 &
        sleep 3

    - name: Run Lighthouse CI
      run: |
        lhci autorun --config='{
          "ci": {
            "collect": {
              "url": ["http://localhost:3000"],
              "numberOfRuns": 1
            },
            "assert": {
              "assertions": {
                "categories:performance": ["warn", {"minScore": 0.8}],
                "categories:accessibility": ["error", {"minScore": 0.9}],
                "categories:best-practices": ["warn", {"minScore": 0.8}],
                "categories:seo": ["warn", {"minScore": 0.8}]
              }
            }
          }
        }'

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security, compatibility, deployment-test, performance]
    if: always() && github.event_name == 'pull_request'

    steps:
    - name: Report Status
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            test: '${{ needs.test.result }}',
            security: '${{ needs.security.result }}',
            compatibility: '${{ needs.compatibility.result }}',
            deployment: '${{ needs.deployment-test.result }}',
            performance: '${{ needs.performance.result }}'
          };

          const passed = Object.values(results).every(r => r === 'success' || r === 'skipped');
          const emoji = passed ? '✅' : '❌';
          const status = passed ? 'All checks passed!' : 'Some checks failed';

          const details = Object.entries(results)
            .map(([name, result]) => `- ${name}: ${result}`)
            .join('\n');

          const comment = `${emoji} **CI Results: ${status}**\n\n${details}`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
